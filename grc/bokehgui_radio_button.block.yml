# auto-generated by grc.converter

id: variable_bokehgui_radiobutton
label: Bokeh GUI Radio buttons
category: '[Bokeh GUI]/Bokeh GUI Widgets'
flags:
- show_id

parameters:
-   id: type
    label: Type
    dtype: enum
    default: bool
    options: [real, int, string, bool, raw]
    option_labels: [Float, Integer, String, Boolean, Any]
    option_attributes:
        conv: [float, int, str, bool, eval]
        str: [str, str, str, str, repr]
    hide: part
-   id: num_opts
    label: Number of options
    dtype: enum
    default: '3'
    options: ['0', '1', '2', '3', '4', '5']
    option_labels: [List, '1', '2', '3', '4', '5']
-   id: value
    label: Default Value
    dtype: ${ type }
    default: 'True'
-   id: inline
    label: Orientation
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: [Horizontal, Vertical]
    hide: part
-   id: options
    label: Options
    dtype: raw
    default: '[0, 1, 2]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: labels
    label: Labels
    dtype: raw
    default: '[]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: option0
    label: Option 0
    dtype: ${ type }
    default: '0'
    hide: ${ ('none' if int(num_opts) > 0 else 'all') }
-   id: label0
    label: Label 0
    dtype: string
    hide: ${ (int(num_opts) > 0) and (label0 and 'none' or 'part') or 'all' }
-   id: option1
    label: Option 1
    dtype: ${ type }
    default: '1'
    hide: ${ ('none' if int(num_opts) > 1 else 'all') }
-   id: label1
    label: Label 1
    dtype: string
    hide: ${ (int(num_opts) > 1) and (label1 and 'none' or 'part') or 'all' }
-   id: option2
    label: Option 2
    dtype: ${ type }
    default: '2'
    hide: ${ ('none' if int(num_opts) > 2 else 'all') }
-   id: label2
    label: Label 2
    dtype: string
    hide: ${ (int(num_opts) > 2) and (label2 and 'none' or 'part') or 'all' }
-   id: option3
    label: Option 3
    dtype: ${ type }
    default: '3'
    hide: ${ ('none' if int(num_opts) > 3 else 'all') }
-   id: label3
    label: Label 3
    dtype: string
    hide: ${ (int(num_opts) > 3) and (label3 and 'none' or 'part') or 'all' }
-   id: option4
    label: Option 4
    dtype: ${ type }
    default: '4'
    hide: ${ ('none' if int(num_opts) > 4 else 'all') }
-   id: label4
    label: Label 4
    dtype: string
    hide: ${ (int(num_opts) > 4) and (label4 and 'none' or 'part') or 'all' }
value: ${ value }

templates:
    imports: import bokehgui
    var_make: self.${id} = ${id} = ${value}
    make: "\\\n<% all_options = [option0, option1, option2, option3, option4][:int(num_opts)]\
        \ %>\n<% all_labels = [label0, label1, label2, label3, label4][:int(num_opts)]\
        \ %>\n########################################################################\n\
        ## Create the options list\n########################################################################\n\
        % if int(num_opts):\nself._${id}_options = [\\\n\t#for ${ch} in ${all_options}\n\
        ${ch}, \\\n\t#end for\n]\n% else:\nself._${id}_options = ${options}\n% endif\n\
        ########################################################################\n\
        ## Create the labels list\n########################################################################\n\
        % if int(num_opts):\nself._${id}_labels = [\\\n\t#for i, ${labels} in enumerate(${all_labels})\n\
        \t% if labels:\n${labels}, \n\t% else:\nstr(self._${id}_options[${i}]), \n\
        \t% endif\n\t#end for\n]\n#elif ${labels}\nself._${id}_labels = ${labels}\n\
        % else:\nself._${id}_labels = map(str, self._${id}_options)\n% endif\n\nself.${id}_radiobutton\
        \ = bokehgui.radiobutton(self.widget_lst, None, self._${id}_labels, inline\
        \ = ${inline})\nself.${id}_radiobutton.add_callback(\n\tlambda new: self.set_${id}(${type.conv}(self._${id}_options[new])))\n"
    callbacks:
    - self.set_${id}(${value})

file_format: 1
